#include <stdio.h>      // За печатење (printf) и внесување (fgets)
#include <stdlib.h>     // За функции како atoi (претворање стринг во број)
#include <unistd.h>     // За функцијата sleep
#include <sys/ipc.h>    // За работа со IPC (Inter-Process Communication)
#include <sys/shm.h>    // За работа со shared memory
#include <string.h>     // За манипулација со стрингови (strlen, memset)
#include <time.h>       // За случајни броеви (rand)

#define SHM_SIZE 1024   // Дефинираме големина од 1024 бајти за shared memory

int main(int argc, char *argv[]) {
    // Проверуваме дали корисникот внел 2 аргументи: тип на процес и клуч
    if (argc != 3) {
        printf("Користење: %s <тип_на_процес> <клуч>\n", argv[0]);
        return 1; // Програмата завршува ако нема доволно аргументи
    }

    int type = atoi(argv[1]); // Првиот аргумент го претвораме во број (тип на процес)
    key_t key = atoi(argv[2]); // Вториот аргумент го претвораме во број (клуч)

    // Креираме или пристапуваме до shared memory користејќи го дадениот клуч
    int shmid = shmget(key, SHM_SIZE, 0644 | IPC_CREAT);
    /*
     * shmget: Креира сегмент на shared memory или пристапува до постоечки
     * - key: Уникатен идентификатор за сегментот на меморија
     * - SHM_SIZE: Големината на меморијата (1024 бајти во овој случај)
     * - 0644: Дозволи за читање/пишување за корисникот и читање за групата/други
     * - IPC_CREAT: Ако сегментот не постои, ќе се креира
     */
    if (shmid == -1) { // Ако има грешка, печатиме порака
        perror("shmget");
        return 1;
    }

    // Го прикачуваме shared memory сегментот на адресниот простор на процесот
    char *shared_memory = (char *)shmat(shmid, NULL, 0);
    /*
     * shmat: Го поврзува сегментот на shared memory со процесот
     * - shmid: Идентификаторот на сегментот
     * - NULL: Дозволуваме системот автоматски да одреди адреса
     * - 0: Без дополнителни опции
     */
    if (shared_memory == (char *)-1) { // Ако има грешка, печатиме порака
        perror("shmat");
        return 1;
    }

    if (type == 1) { // Прв тип на процес (внесување пораки)
        while (1) {
            printf("Внеси порака: ");
            fgets(shared_memory, SHM_SIZE, stdin); // Читаме порака од корисникот
            shared_memory[strcspn(shared_memory, "\n")] = '\0'; // Отстрануваме нов ред

            printf("Пораката е запишана во меморијата.\n");
            sleep(rand() % 10 + 1); // Чекаме случаен број секунди (1-10)
        }
    } else if (type == 2) { // Втор тип на процес (бришење пораки)
        while (1) {
            sleep(5); // Чекаме 5 секунди
            memset(shared_memory, 0, SHM_SIZE); // Ја празниме shared memory
            printf("Меморијата е испразнета од вториот процес.\n");
        }
    } else if (type == 3) { // Трет тип на процес (читање пораки)
        while (1) {
            if (strlen(shared_memory) > 0) { // Проверуваме дали има порака
                printf("Прочитано од меморијата: %s\n", shared_memory);
                sleep(rand() % 10 + 1); // Чекаме случаен број секунди (1-10)
            } else {
                sleep(1); // Проверуваме на секоја секунда
            }
        }
    } else {
        printf("Невалиден тип на процес. Дозволени се 1, 2 или 3.\n");
    }

    // Одвојување на shared memory сегментот од процесот
    shmdt(shared_memory);

    return 0; // Завршуваме програмата
}
